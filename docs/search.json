[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Engineering Computation",
    "section": "",
    "text": "Preface\nA Brief Introduction to Computational Tools for Mechanics presents a collection of tutorials based on lecture notes from Applied Mechanics classes, designed to give learners clear and essential insights into key topics. No previous programming experience is required. Each tutorial guides you step by step through the concepts with hands-on examples and includes a problem set to reinforce understanding. You will learn to solve applied mechanics problems using computational tools, with an emphasis on practice and problem-solving rather than theory alone.\n1  Python Tutorial: Introduces the fundamentals of Python, including syntax, variables, data types, operations, control flow, and functions.\n2  International System of Units: Explains the International System of Units (SI), the globally accepted standard for measurement, and its role in ensuring consistency, clarity, and comparability in scientific and technical work.\n3  Advanced Python Tutorial: Covers advanced Python skills, including the use of virtual environments for project isolation, installing libraries such as Pint with pip, and developing a flexible unit conversion script.\n4  Python for Applied Mechanics: Demonstrates the application of Python to applied mechanics problems, using NumPy for computations, Matplotlib for visualization, and SciPy for numerical methods.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "tutorial_basic.html",
    "href": "tutorial_basic.html",
    "title": "1  Python Tutorial",
    "section": "",
    "text": "1.1 Requirements\nThis tutorial introduces Python programming, covering basic concepts with examples to illustrate key points. We will start by using Python as a calculator, then explore variables, functions, and control flow.\nTo follow this tutorial, you must have Python (version 3.10 or later) installed on your computer. Python is available for Windows, macOS, and Linux. Additionally, ensure you have a text editor or an Integrated Development Environment (IDE) to write Python code. We recommend Positron, a user-friendly IDE with a built-in terminal for running Python scripts, though other editors like VS Code or PyCharm are also suitable.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_basic.html#basic-syntax",
    "href": "tutorial_basic.html#basic-syntax",
    "title": "1  Python Tutorial",
    "section": "1.2 Basic Syntax",
    "text": "1.2 Basic Syntax\nPython uses indentation (typically four spaces) to define code blocks. A colon (:) introduces a block, and statements within the block must be indented consistently. Python is case-sensitive, so Variable and variable are distinct identifiers. Statements typically end with a newline, but you can use a backslash (\\) to continue a statement across multiple lines.\ntotal = 1 + 2 + 3 + \\\n        4 + 5\nprint(total)  # Output: 15\nBasic syntax rules:\n\nComments start with # and extend to the end of the line.\nStrings can be enclosed in single quotes ('), double quotes (\"), or triple quotes (''' or \"\"\") for multi-line strings.\nPython is case-sensitive, so Variable and variable are different identifiers.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_basic.html#the-print-function",
    "href": "tutorial_basic.html#the-print-function",
    "title": "1  Python Tutorial",
    "section": "1.3 The print() Function",
    "text": "1.3 The print() Function\nThe print() function displays output in Python.\nname = \"Rudolf Diesel\"\nyear = 1858\nprint(f\"{name} was born in {year}.\")\nOutput: Rudolf Diesel was born in 1858.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_basic.html#formatting-in-print",
    "href": "tutorial_basic.html#formatting-in-print",
    "title": "1  Python Tutorial",
    "section": "1.4 Formatting in print()",
    "text": "1.4 Formatting in print()\nThe following table illustrates common f-string formatting options for the print() function:\n\n\n\n\n\n\n\n\n\nFormat\nCode\nExample\nOutput\n\n\n\n\nRound to 2 decimals\nf\"{x:.2f}\"\nprint(f\"{3.14159:.2f}\")\n3.14\n\n\nRound to whole number\nf\"{x:.0f}\"\nprint(f\"{3.9:.0f}\")\n4\n\n\nThousands separator\nf\"{x:,.2f}\"\nprint(f\"{1234567.89:,.2f}\")\n1,234,567.89\n\n\nPercentage\nf\"{x:.1%}\"\nprint(f\"{0.756:.1%}\")\n75.6%\n\n\nCurrency style\nf\"${x:,.2f}\"\nprint(f\"${1234.5:,.2f}\")\n$1,234.50\n\n\n\nNote: The currency symbol (e.g., $) can be modified for other currencies (e.g., €, £) based on the desired locale.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_basic.html#variables-and-data-types",
    "href": "tutorial_basic.html#variables-and-data-types",
    "title": "1  Python Tutorial",
    "section": "1.5 Variables and Data Types",
    "text": "1.5 Variables and Data Types\nVariables store data and are assigned values using the = operator.\nx = 10\ny = 3.14\nname = \"Rudolph\"\nPython has several built-in data types, including:\n\nIntegers (int): Whole numbers, e.g., 10, -5\nFloating-point numbers (float): Decimal numbers, e.g., 3.14, -0.001\nStrings (str): Text, e.g., \"Hello\", 'World'\nBooleans (bool): True or False\n\n\n1.5.1 Arithmetic Operations\na = 10\nb = 3\nprint(a + b)  # Addition: 13\nprint(a - b)  # Subtraction: 7\nprint(a * b)  # Multiplication: 30\nprint(a / b)  # Division: 3.3333...\nprint(a // b) # Integer Division: 3\nprint(a ** b) # Exponentiation: 1000\n\n\n1.5.2 String Operations\nfirst_name = \"Rudolph\"\nlast_name = \"Diesel\"\nfull_name = first_name + \" \" + last_name  # Concatenation using +\nprint(full_name)  # Output: Rudolph Diesel\nprint(f\"{first_name} {last_name}\")  # Concatenation using f-string\nprint(full_name * 2)  # Repetition: Rudolph DieselRudolph Diesel\nprint(full_name.upper())  # Uppercase: RUDOLPH DIESEL\nNote: String repetition (*) concatenates the string multiple times without spaces. For example, full_name * 2 produces Rudolph DieselRudolph Diesel.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_basic.html#python-as-a-calculator-in-interactive-mode",
    "href": "tutorial_basic.html#python-as-a-calculator-in-interactive-mode",
    "title": "1  Python Tutorial",
    "section": "1.6 Python as a Calculator in Interactive Mode",
    "text": "1.6 Python as a Calculator in Interactive Mode\nPython’s interactive mode allows you to enter commands and see results immediately, ideal for quick calculations. To start, open a terminal (on macOS, Linux, or Windows) and type:\npython3  # Use 'python' on Windows if 'python3' is not recognized\nYou should see the Python prompt:\n&gt;&gt;&gt;\nEnter expressions and press Enter to see results:\n2 + 3  # Output: 5\n7 - 4  # Output: 3\n6 * 9  # Output: 54\n8 / 2  # Output: 4.0\n8 // 2 # Output: 4\n2 ** 3 # Output: 8\n\n1.6.1 Parentheses for Grouping\n(2 + 3) * 4  # Output: 20\n2 + (3 * 4)  # Output: 14\n\n\n1.6.2 Variables\nx = 10\ny = 3\nx / y  # Output: 3.3333333333333335\n\n\n1.6.3 Exiting Interactive Mode\nTo exit, type:\nexit()\nAlternatively, use: - Ctrl+D (macOS/Linux) - Ctrl+Z then Enter (Windows)",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_basic.html#control-flow",
    "href": "tutorial_basic.html#control-flow",
    "title": "1  Python Tutorial",
    "section": "1.7 Control Flow",
    "text": "1.7 Control Flow\nControl flow statements direct the execution of code based on conditions.\n\n1.7.1 Conditional Statements\nConditional statements allow you to execute different code blocks based on specific conditions. Python provides three keywords for this purpose:\n\nif: Evaluates a condition and executes its code block if the condition is True.\nelif: Short for “else if,” it checks an additional condition if the preceding if or elif conditions are False. You can use multiple elif statements to test multiple conditions sequentially, and Python will execute the first True condition’s block, skipping the rest.\nelse: Executes a code block if none of the preceding if or elif conditions are True. It serves as a fallback and does not require a condition.\n\nThe following example uses age to categorize a person as a Minor, Adult, or Senior, demonstrating how if, elif, and else work together.\n# Categorize a person based on their age\nage = 19\nif age &lt; 18:\n    print(\"Minor\")\nelif age &lt;= 64:\n    print(\"Adult\")\nelse:\n    print(\"Senior\")\nOutput: Adult\n\n\n1.7.2 For Loop\nA for loop iterates over a sequence (e.g., list or string).\ncomponents = [\"piston\", \"liner\", \"connecting rod\"]\nfor component in components:\n    print(component)\nOutput:\npiston\nliner\nconnecting rod\n\n\n1.7.3 While Loop\nA while loop executes as long as a condition is true. Ensure the condition eventually becomes false to avoid infinite loops.\ncount = 0\nwhile count &lt;= 5:\n    print(count)\n    count += 1\nOutput:\n0\n1\n2\n3\n4\n5",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_basic.html#functions",
    "href": "tutorial_basic.html#functions",
    "title": "1  Python Tutorial",
    "section": "1.8 Functions",
    "text": "1.8 Functions\n\n1.8.1 The def Keyword\nFunctions are reusable code blocks defined using the def keyword. They can include default parameters for optional arguments.\ndef add(a, b=0):\n    return a + b\nprint(add(5))      # Output: 5\nprint(add(5, 3))   # Output: 8\n\ndef multiply(*args):\n    result = 1\n    for num in args:\n        result *= num\n    return result\nprint(multiply(2, 3, 4))  # Output: 24\n\n\n1.8.2 The lambda Keyword\nThe lambda keyword creates anonymous functions for short, one-off operations, often used in functional programming.\ncelsius_to_fahrenheit = lambda c: (c * 9 / 5) + 32\nprint(celsius_to_fahrenheit(25))  # Output: 77.0",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_basic.html#the-math-module",
    "href": "tutorial_basic.html#the-math-module",
    "title": "1  Python Tutorial",
    "section": "1.9 The math Module",
    "text": "1.9 The math Module\nThe math module provides mathematical functions and constants.\nimport math\nprint(math.sqrt(16))  # Output: 4.0\nprint(math.pi)        # Output: 3.141592653589793\nimport math\nangle = math.pi / 4  # 45 degrees in radians\nprint(math.sin(angle))  # Output: 0.7071067811865475 (approximately √2/2)\nprint(math.cos(angle))  # Output: 0.7071067811865476 (approximately √2/2)\nprint(math.tan(angle))  # Output: 1.0\nNote: Floating-point arithmetic may result in small precision differences, as seen in the sin and cos outputs.\nimport math\nprint(math.log(10))       # Natural logarithm of 10: 2.302585092994046\nprint(math.log(100, 10))  # Logarithm of 100 with base 10: 2.0\n\n1.9.1 Converting Between Radians and Degrees\nThe math module provides math.radians() to convert degrees to radians and math.degrees() to convert radians to degrees, which is useful for trigonometric calculations.\nimport math\ndegrees = 180\nradians = math.radians(degrees)\nprint(f\"{degrees} degrees is {radians:.3f} radians\")  # Output: 180 degrees is 3.142 radians\n\nradians = math.pi / 2\ndegrees = math.degrees(radians)\nprint(f\"{radians:.3f} radians is {degrees:.1f} degrees\")  # Output: 1.571 radians is 90.0 degrees",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_basic.html#writing-python-scripts",
    "href": "tutorial_basic.html#writing-python-scripts",
    "title": "1  Python Tutorial",
    "section": "1.10 Writing Python Scripts",
    "text": "1.10 Writing Python Scripts\nWrite Python code in a .py file and run it as a script. Create a file named script.py:\n# script.py\nimport math\nprint(\"Square root of 16 is:\", math.sqrt(16))\nprint(\"Value of pi is:\", math.pi)\nprint(\"Sine of 90 degrees is:\", math.sin(math.pi / 2))\nprint(\"Natural logarithm of 10 is:\", math.log(10))\nprint(\"Logarithm of 100 with base 10 is:\", math.log(100, 10))\nTo run the script, open a terminal, navigate to the directory containing script.py using the cd command (e.g., cd /path/to/directory), and type:\npython3 script.py  # or python script.py on Windows\nOutput:\nSquare root of 16 is: 4.0\nValue of pi is: 3.141592653589793\nSine of 90 degrees is: 1.0\nNatural logarithm of 10 is: 2.302585092994046\nLogarithm of 100 with base 10 is: 2.0",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_basic.html#summary",
    "href": "tutorial_basic.html#summary",
    "title": "1  Python Tutorial",
    "section": "1.11 Summary",
    "text": "1.11 Summary\nThis tutorial covered Python basics, including syntax, variables, data types, operations, control flow, and functions. Python’s rich ecosystem includes libraries like:\n\nNumPy: For numerical computations and array manipulations.\nMatplotlib: For data visualization and plotting.\nPandas: For data manipulation and analysis with tabular data structures.\nPint: For handling physical quantities and performing unit conversions.\n\nYou can explore these libraries to enhance your Python programming skills further. For example installing them can be done using pip:\npip install numpy matplotlib pandas pint\npip is Python’s package manager for installing and managing additional libraries.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Tutorial</span>"
    ]
  },
  {
    "objectID": "SI_Units.html",
    "href": "SI_Units.html",
    "title": "2  International System of Units",
    "section": "",
    "text": "2.1 SI Units\nThe International System of Units (SI) is the globally accepted standard for measurement. Established to provide a consistent framework for scientific and technical measurements, SI units facilitate clear communication and data comparison across various fields and countries. The system is based on seven fundamental units: the meter for length, the kilogram for mass, the second for time, the ampere for electric current, the kelvin for temperature, the mole for substance, and the candela for luminous intensity.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>International System of Units</span>"
    ]
  },
  {
    "objectID": "SI_Units.html#si-units",
    "href": "SI_Units.html#si-units",
    "title": "2  International System of Units",
    "section": "",
    "text": "Base SI units.\n\n\nPhysical Quantity\nSI Base Unit\nSymbol\n\n\n\n\nLength\nMeter\nm\n\n\nMass\nKilogram\nkg\n\n\nTime\nSecond\ns\n\n\nElectric Current\nAmpere\nA\n\n\nTemperature\nKelvin\nK\n\n\nAmount of Substance\nMole\nmol\n\n\nLuminous Intensity\nCandela\ncd\n\n\n\n\nDerived SI units.\n\n\nPhysical Quantity\nDerived SI Unit\nSymbol\n\n\n\n\nArea\nSquare meter\nm²\n\n\nVolume\nCubic meter\nm³\n\n\nSpeed\nMeter per second\nm/s\n\n\nAcceleration\nMeter per second squared\nm/s2\n\n\nForce\nNewton\nN\n\n\nPressure\nPascal\nPa\n\n\nEnergy\nJoule\nJ\n\n\nPower\nWatt\nW\n\n\nElectric Charge\nCoulomb\nC\n\n\nElectric Potential\nVolt\nV\n\n\nResistance\nOhm\nΩ\n\n\nCapacitance\nFarad\nF\n\n\nFrequency\nHertz\nHz\n\n\nLuminous Flux\nLumen\nlm\n\n\nIlluminance\nLux\nlx\n\n\nSpecific Energy\nJoule per kilogram\nJ/kg\n\n\nSpecific Heat Capacity\nJoule per kilogram Kelvin\nJ/(kg·K)\n\n\n\n\n\nCommon multiples and submultiples for SI units.\n\n\nFactor\nPrefix\nSymbol\n\n\n\n\n109\ngiga\nG\n\n\n106\nmega\nM\n\n\n103\nkilo\nk\n\n\n102\nhecto\nh\n\n\n101\ndeca\nda\n\n\n10-1\ndeci\nd\n\n\n10-2\ncenti\nc\n\n\n10-3\nmilli\nm\n\n\n10-6\nmicro\nµ",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>International System of Units</span>"
    ]
  },
  {
    "objectID": "SI_Units.html#si-system-rules-and-common-mistakes",
    "href": "SI_Units.html#si-system-rules-and-common-mistakes",
    "title": "2  International System of Units",
    "section": "2.2 SI System Rules and Common Mistakes",
    "text": "2.2 SI System Rules and Common Mistakes\nUsing the SI system correctly is crucial for clear communication in science and engineering. Below are common mistakes in using the SI system, examples of incorrect usage, and how to correct them.\n\nSI system rules and common mistakes\n\n\n\n\n\n\n\n\nConcept\nMistake\nCorrect Usage\nNotes\n\n\n\n\nUse of SI Unit Symbols\nm./s\nm/s\nUse the correct format without additional punctuation.\n\n\nSpacing Between Value & Unit\n10kg\n10 kg\nAlways leave a space between the number and the unit symbol.\n\n\nIncorrect Unit Symbols\nsec, hrs, °K\ns, h, K\nUse the proper SI symbols; symbols are case-sensitive.\n\n\nAbbreviations for Units\n5 kilograms (kgs)\n5 kilograms (kg)\nAvoid informal abbreviations like “kgs”; adhere to standard symbols.\n\n\nMultiple Units in Expressions\n5 m/s/s, 5 kg/meter²\n5 m/s², 5 kg/m²\nUse compact, standardized formats for derived units.\n\n\nIncorrect Use of Prefixes\n0.0001 km\n100 mm\nChoose prefixes to keep numbers in the range (0.1 x &lt; 1000).\n\n\nMisplaced Unit Symbols\n5/s, kg10\n5 s⁻¹, 10 kg\nSymbols must follow numerical values, not precede them.\n\n\nDegrees Celsius vs. Kelvin\n300°K\n300 K\nKelvin is written without “degree”\n\n\nSingular vs. Plural Units\n5 kgs, 1 meters\n5 kg, 1 meter\nSymbols do not pluralize; full unit names follow grammar rules.\n\n\nCapitalization of Symbols\nKg, S, Km, MA\nkg, s, km, mA\nSymbols are case-sensitive; use uppercase only where specified (e.g., N, Pa).\n\n\nCapitalization of Unit Names\nNewton, Pascal, Watt\nnewton, pascal, watt\nUnit names are lowercase, even if derived from a person’s name, unless starting a sentence.\n\n\nPrefix Capitalization\nMilliMeter, MegaWatt\nmillimeter, megawatt\nPrefixes are lowercase for (10^{-1}) to (10^{-9}), uppercase for (10^6) and larger (except k for kilo).\n\n\nFormatting in Reports\n5, Temperature: 300\n5 kg, Temperature: 300 K\nAlways specify units explicitly.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>International System of Units</span>"
    ]
  },
  {
    "objectID": "SI_Units.html#unity-fraction",
    "href": "SI_Units.html#unity-fraction",
    "title": "2  International System of Units",
    "section": "2.3 Unity Fraction",
    "text": "2.3 Unity Fraction\nThe unity fraction method, or unit conversion using unity fractions, is a systematic way to convert one unit of measurement into another. This method relies on multiplying by fractions that are equal to one, where the numerator and the denominator represent the same quantity in different units. Since any number multiplied by one remains the same, unity fractions allow for seamless conversion without changing the value.\nThe principle of unity fractions is based on:\n\nSetting up equal values: Write a fraction where the numerator and denominator are equivalent values in different units, so the fraction equals one. For example, \\(\\frac{1km}{1000m}\\) is a unity fraction because 1 km equals 1000 m.\nMultiplying by unity fractions: Multiply the initial quantity by the unity fraction(s) so that the undesired units cancel out, leaving only the desired units.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>International System of Units</span>"
    ]
  },
  {
    "objectID": "SI_Units.html#classwork",
    "href": "SI_Units.html#classwork",
    "title": "2  International System of Units",
    "section": "2.4 Classwork",
    "text": "2.4 Classwork\n\nExample 2.1 Suppose we want to convert \\(5\\) kilometers to meters.\n\nStart with \\(5\\) kilometers: \\[\n5 \\, \\text{km}\n\\]\nMultiply by a unity fraction that cancels kilometers and introduces meters. We use \\((\\frac{1000 \\, \\text{m}}{1 \\, \\text{km}}), since\\:1 \\, \\text{km} = 1000 \\, \\text{m}\\):\n\n\\[5 \\, \\text{km} \\times \\frac{1000 \\, \\text{m}}{1 \\, \\text{km}} = 5000 \\, \\text{m}\\]\n\nThe kilometers \\(\\text{km}\\) cancel out, leaving us with meters \\(\\text{m}\\):\n\n\\[\n5 \\, \\text{km} = 5000 \\, \\text{m}\n\\]\nThis step-by-step approach illustrates how the unity fraction cancels the undesired units and achieves the correct result in meters.\nUnity fractions can be extended by using multiple conversion steps. For example, converting hours to seconds would require two unity fractions: one to convert hours to minutes and another to convert minutes to seconds. This approach ensures accuracy and is widely used in science, engineering, and other fields that require precise unit conversions.\n\n\nExample 2.2 Convert \\(15 \\, \\text{m/s}\\) to \\(\\text{km/h}\\).\n\nStart with \\(15 \\, \\text{m/s}\\).\nTo convert meters to kilometers, multiply by \\(\\frac{1 \\, \\text{km}}{1000 \\, \\text{m}}\\).\nTo convert seconds to hours, multiply by \\(\\frac{3600 \\, \\text{s}}{1 \\, \\text{h}}\\).\n\n\\[\n15 \\, \\text{m/s} \\times \\frac{1 \\, \\text{km}}{1000 \\, \\text{m}} \\times \\frac{3600 \\, \\text{s}}{1 \\, \\text{h}} = 54 \\, \\text{km/h}\n\\]\nThe meters and seconds cancel out, leaving kilometers per hour: \\(54 \\, \\text{km/h}\\).",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>International System of Units</span>"
    ]
  },
  {
    "objectID": "SI_Units.html#problem-set",
    "href": "SI_Units.html#problem-set",
    "title": "2  International System of Units",
    "section": "2.5 Problem Set",
    "text": "2.5 Problem Set\nInstructions:\n\nUse unity fraction to convert between derived SI units.\nShow each step of your work to ensure accuracy.\nSimplify your answers and include correct units.\n\n\n\nSpeed\nConvert \\(72 \\, \\text{km/h}\\) to \\(\\text{m/s}\\).\nForce\nConvert \\(980 \\, \\text{N}\\) (newtons) to \\(\\text{kg} \\cdot \\text{m/s}^2\\).\nEnergy\nConvert \\(2500 \\, \\text{J}\\) (joules) to \\(\\text{kJ}\\).\nPower\nConvert \\(1500 \\, \\text{W}\\) (watts) to \\(\\text{kW}\\).\nPressure\nConvert \\(101325 \\, \\text{Pa}\\) (pascals) to \\(\\text{kPa}\\).\nVolume Flow Rate\nConvert \\(3 \\, \\text{m}^3/\\text{min}\\) to \\(\\text{L/s}\\).\nDensity\nConvert \\(1000 \\, \\text{kg/m}^3\\) to \\(\\text{g/cm}^3\\).\nAcceleration\nConvert \\(9.8 \\, \\text{m/s}^2\\) to \\(\\text{cm/s}^2\\).\nTorque\nConvert \\(50 \\, \\text{N} \\cdot \\text{m}\\) to \\(\\text{kN} \\cdot \\text{cm}\\).\nFrequency\nConvert \\(500 \\, \\text{Hz}\\) (hertz) to \\(\\text{kHz}\\).\nWork to Energy Conversion\nA force of \\(20 \\, \\text{N}\\) moves an object \\(500 \\, \\text{cm}\\). Convert the work done to joules.\nKinetic Energy Conversion\nCalculate the kinetic energy in kilojoules of a \\(1500 \\, \\text{kg}\\) car moving at \\(72 \\, \\text{km/h}\\).\nPower to Energy Conversion\nA machine operates at \\(2 \\, \\text{kW}\\) for \\(3\\) hours. Convert the energy used to megajoules.\nPressure to Force Conversion\nConvert a pressure of \\(200 \\, \\text{kPa}\\) applied to an area of \\(0.5 \\, \\text{m}^2\\) to force in newtons.\nDensity to Mass Conversion\nConvert \\(0.8 \\, \\text{g/cm}^3\\) for an object with a volume of \\(250 \\, \\text{cm}^3\\) to mass in grams.\n\n\n\n2.5.1 Answer Key\n\n\\(72 \\, \\text{km/h} = 20 \\, \\text{m/s}\\)\n\\(980 \\, \\text{N} = 980 \\, \\text{kg} \\cdot \\text{m/s}^2\\)\n\\(2500 \\, \\text{J} = 2.5 \\, \\text{kJ}\\)\n\\(1500 \\, \\text{W} = 1.5 \\, \\text{kW}\\)\n\\(101325 \\, \\text{Pa} = 101.325 \\, \\text{kPa}\\)\n\\(3 \\, \\text{m}^3/\\text{min} = 50 \\, \\text{L/s}\\)\n\\(1000 \\, \\text{kg/m}^3 = 1 \\, \\text{g/cm}^3\\)\n\\(9.8 \\, \\text{m/s}^2 = 980 \\, \\text{cm/s}^2\\)\n\\(50 \\, \\text{N} \\cdot \\text{m} = 5 \\, \\text{kN} \\cdot \\text{cm}\\)\n\\(500 \\, \\text{Hz} = 0.5 \\, \\text{kHz}\\)\n\\(20 \\, \\text{N} \\times 5 \\, \\text{m} = 100 \\, \\text{J}\\)\n\\(\\text{Kinetic energy} = 1500 \\, \\text{kg} \\times \\left(20 \\, \\text{m/s}\\right)^2 / 2 = 300 \\, \\text{kJ}\\)\n\\(2 \\, \\text{kW} \\times 3 \\, \\text{hours} = 21.6 \\, \\text{MJ}\\)\n\\(200 \\, \\text{kPa} \\times 0.5 \\, \\text{m}^2 = 100,000 \\, \\text{N}\\)\n\\(0.8 \\, \\text{g/cm}^3 \\times 250 \\, \\text{cm}^3 = 200 \\, \\text{g}\\)",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>International System of Units</span>"
    ]
  },
  {
    "objectID": "SI_Units.html#further-reading",
    "href": "SI_Units.html#further-reading",
    "title": "2  International System of Units",
    "section": "2.6 Further Reading",
    "text": "2.6 Further Reading\nIntroduction in Russell et al. (2021) and SI units in Bolton (2021) for additional information.\n\n\n\n\nBolton, W. (2021). Engineering science (Seventh edition). Routledge.\n\n\nRussell, P. A., Jackson, L., & Embleton, W. (2021). Applied mechanics for marine engineers (7th edition). Reeds.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>International System of Units</span>"
    ]
  },
  {
    "objectID": "tutorial_advanced.html",
    "href": "tutorial_advanced.html",
    "title": "3  Advanced Python Tutorial",
    "section": "",
    "text": "3.1 Requirements\nThis tutorial builds upon the foundational concepts introduced in the basic Python tutorial, focusing on more advanced topics. It covers virtual environments for project isolation, installing external libraries using pip, and applying these skills to build a unit conversion script with the Pint library. Examples are provided to demonstrate practical implementation, including conversions for speed and pressure units.\nTo follow this tutorial, ensure you have Python (version 3.10 or later) installed on your computer, as detailed in the basic tutorial. You will also need access to a terminal or command prompt for creating virtual environments and installing libraries. No additional IDE is required beyond what was recommended previously, though Positron or VS Code remains suitable.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Advanced Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_advanced.html#virtual-environments-.venv",
    "href": "tutorial_advanced.html#virtual-environments-.venv",
    "title": "3  Advanced Python Tutorial",
    "section": "3.2 Virtual Environments (.venv)",
    "text": "3.2 Virtual Environments (.venv)\nVirtual environments in Python allow you to create isolated spaces for projects, ensuring that dependencies (libraries and versions) do not conflict across different projects. This is particularly useful when working on multiple applications that require different library versions.\n\n3.2.1 Why Use Virtual Environments?\n\nIsolation: Each project can have its own set of installed packages without affecting the global Python installation.\nReproducibility: Share your project’s dependencies easily via a requirements.txt file.\nCleanliness: Avoid cluttering your system Python with project-specific libraries.\n\n\n\n3.2.2 Creating a Virtual Environment\nTo create a virtual environment named .venv in your project directory, open a terminal and navigate to the desired folder, then run:\npython -m venv .venv\nThis command generates a .venv directory containing an isolated Python interpreter and pip.\n\n\n3.2.3 Activating the Virtual Environment\nActivation makes the virtual environment’s Python and pip the default for your terminal session.\n\nOn macOS/Linux:\nsource .venv/bin/activate\nOn Windows:\n.venv\\Scripts\\activate\n\nOnce activated, your terminal prompt will typically show (.venv) to indicate the active environment.\n\n\n3.2.4 Deactivating the Virtual Environment\nTo exit the virtual environment and return to the global Python, simply run:\ndeactivate",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Advanced Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_advanced.html#installing-libraries-with-pip",
    "href": "tutorial_advanced.html#installing-libraries-with-pip",
    "title": "3  Advanced Python Tutorial",
    "section": "3.3 Installing Libraries with pip",
    "text": "3.3 Installing Libraries with pip\npip is Python’s package installer, used to download and install libraries from the Python Package Index (PyPI). Within an activated virtual environment, installations are confined to that environment.\n\n3.3.1 Installing Pint\nPint is a library for handling physical quantities and unit conversions, ensuring dimensional consistency in calculations.\nTo install Pint, activate your virtual environment (as described above) and run:\npip install pint\nThis command downloads and installs Pint and its dependencies. To verify the installation, start Python in interactive mode (e.g., python) and import Pint:\nimport pint\nIf no errors occur, the installation is successful.\n\n\n3.3.2 Managing Dependencies\nTo save your project’s dependencies (e.g., for sharing), generate a requirements.txt file:\npip freeze &gt; requirements.txt\nOthers can recreate the environment by installing from this file:\npip install -r requirements.txt\n\n\n3.3.3 Sample Requirements File\nA requirements.txt file lists the libraries and their versions required for a project. Below is an example for a project using Pint:\npint&gt;=0.23\nSave this content in a file named requirements.txt in your project directory. You can install these dependencies in a new virtual environment using pip install -r requirements.txt. This ensures consistent library versions across different setups.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Advanced Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_advanced.html#building-a-unit-conversion-script-with-pint",
    "href": "tutorial_advanced.html#building-a-unit-conversion-script-with-pint",
    "title": "3  Advanced Python Tutorial",
    "section": "3.4 Building a Unit Conversion Script with Pint",
    "text": "3.4 Building a Unit Conversion Script with Pint\nPint simplifies unit conversions by associating units with numerical values, automatically handling conversions and ensuring compatibility (e.g., preventing addition of length and mass).\n\n3.4.1 Basic Usage of Pint\nFirst, import Pint and create a UnitRegistry to manage units:\n# Basic Usage of Pint\nfrom pint import UnitRegistry\n\nureg = UnitRegistry()\n\n# Define a quantity with units\nlength = 2.5 * ureg.meter\n\n# Convert to another unit\nlength_in_feet = length.to(ureg.foot)\nprint(length_in_feet)  # Output: 8.202099737532808 foot\nPint supports a wide range of units, including length, mass, temperature, speed, and pressure. For temperature conversions, use the .to() method carefully, as some require delta considerations for differences versus absolute values.\n\n\n3.4.2 Temperature Conversion\n# Temperature Conversion\n\nfrom pint import UnitRegistry\n\nureg = UnitRegistry()\nQ_ = ureg.Quantity # shorthand\n\n# === Absolute temperature conversions require .to() on a Quantity object ===\nt_c = Q_(10, ureg.degC)\nt_k = t_c.to(ureg.K)\nt_f = t_c.to(ureg.degF)\n\nprint(\"Initial temperature:\")\nprint(f\"{t_c} = {t_k} = {t_f:.2f}\")\n\nt_c = Q_(5, ureg.degC)\nt_k = t_c.to(ureg.K)\nt_f = t_c.to(ureg.degF)\n\nprint(\"\\nFinal temperature:\")\nprint(f\"{t_c} = {t_k} = {t_f:.2f}\")\n\n# === Delta temperatures (for differences) ===\ndelta_c = Q_(5, ureg.delta_degC)\ndelta_k = delta_c.to(ureg.kelvin)          # Use kelvin for differences\ndelta_f = delta_c.to(ureg.delta_degF)\n\nprint(\"\\nTemperature differences:\")\nprint(f\"{delta_c} = {delta_k} = {delta_f}\")\n\n# === Difference between two absolute temperatures ===\nt1_c = Q_(10, ureg.degC)\nt2_c = Q_(5, ureg.degC)\n\ndelta_abs_c = t1_c - t2_c                 # 5 degC\ndelta_abs_k = delta_abs_c.to(ureg.kelvin) # 5 K\ndelta_abs_f = delta_abs_c.to(ureg.delta_degF) # 9 delta_degF\n\nprint(\"\\nOr difference between 10 °C and 5 °C:\")\nprint(f\"{delta_abs_c} = {delta_abs_k} = {delta_abs_f}\")\nOutput:\nInitial temperature:\n10 degree_Celsius = 283.15 kelvin = 50.00 degree_Fahrenheit\n\nFinal temperature:\n5 degree_Celsius = 278.15 kelvin = 41.00 degree_Fahrenheit\n\nTemperature differences:\n5 delta_degree_Celsius = 5 kelvin = 9.0 delta_degree_Fahrenheit\n\nOr difference between 10 °C and 5 °C:\n5 delta_degree_Celsius = 5 kelvin = 9.0 delta_degree_Fahrenheit\nNote that the conversion from Fahrenheit to Celsius is given:\n\\[\nt_f = (t_c \\times \\frac{9}{5}) + 32\n\\]\nand for temperature difference, the offset +32 does not apply:\n\\[\n\\Delta t_f = \\Delta t_c \\times \\frac{9}{5}\n\\]\n\n\n3.4.3 Building the Script\nCreate a file named unit_converter.py in your project directory. The following script provides a command-line interface for converting various units (e.g., length, temperature, speed, pressure) using Pint. Activate your virtual environment, ensure Pint is installed, and add the code below:\n# unit_converter.py\nfrom pint import UnitRegistry, UndefinedUnitError, DimensionalityError\nimport sys\n\n# Common unit aliases for applied mechanics\nunit_aliases = {\n    # Length / distance\n    \"m\": \"meter\",\n    \"meter\": \"meter\",\n    \"meters\": \"meter\",\n    \"cm\": \"centimeter\",\n    \"mm\": \"millimeter\",\n    \"km\": \"kilometer\",\n    \"ft\": \"foot\",\n    \"inch\": \"inch\",\n    \"in\": \"inch\",\n    \"mi\": \"mile\",\n\n    # Force\n    \"n\": \"newton\",\n    \"newton\": \"newton\",\n    \"kgf\": \"kilogram_force\",\n    \"kg_f\": \"kilogram_force\",\n    \"lbf\": \"pound_force\",\n    \"lb_f\": \"pound_force\",\n\n    # Pressure / stress\n    \"pa\": \"pascal\",\n    \"kpa\": \"kPa\",\n    \"mpa\": \"MPa\",\n    \"bar\": \"bar\",\n    \"psi\": \"psi\",\n    \"atm\": \"atm\",\n\n    # Energy / work\n    \"j\": \"joule\",\n    \"kj\": \"kilojoule\",\n    \"cal\": \"calorie\",\n    \"kcal\": \"kilocalorie\",\n    \"ev\": \"electronvolt\",\n    \"eV\": \"electronvolt\",\n\n    # Power\n    \"w\": \"watt\",\n    \"kw\": \"kilowatt\",\n    \"hp\": \"horsepower\",\n\n    # Mass\n    \"kg\": \"kilogram\",\n    \"g\": \"gram\",\n    \"lb\": \"pound\",\n    \"lbs\": \"pound\",\n    \"t\": \"ton\",\n    \"slug\": \"slug\",\n\n    # Acceleration\n    \"m/s^2\": \"meter/second**2\",\n    \"ft/s^2\": \"foot/second**2\",\n    \"g\": \"9.80665*m/s**2\",  # gravity acceleration\n\n    # Torque / Moment\n    \"n*m\": \"newton*meter\",\n    \"lbf*ft\": \"pound_force*foot\",\n    \"kgf*m\": \"kilogram_force*meter\",\n\n    # Speed / velocity\n    \"m/s\": \"meter/second\",\n    \"km/h\": \"km/h\",\n    \"kph\": \"km/h\",\n    \"mph\": \"mile/hour\",\n    \"ft/s\": \"foot/second\",\n    \"knot\": \"knot\",\n\n    # Temperature\n    \"degc\": \"degC\",\n    \"degf\": \"degF\",\n    \"celsius\": \"degC\",\n    \"fahrenheit\": \"degF\",\n    \"k\": \"kelvin\",\n    \"delta_degC\": \"delta_degC\",\n    \"delta_degF\": \"delta_degF\"\n}\n\ndef main():\n    ureg = UnitRegistry()\n    \n    if len(sys.argv) != 4:\n        print(\"Usage: python unit_converter.py &lt;value&gt; &lt;from_unit&gt; &lt;to_unit&gt;\\n\")\n        print(\"Examples:\")\n        print(\"  python unit_converter.py 2.5 meter foot\")\n        print(\"  python unit_converter.py 100 degC degF\")\n        print(\"  python unit_converter.py 100 knot km/h\")\n        print(\"  python unit_converter.py 50 psi kPa\")\n        print(\"  python unit_converter.py 5000 hp kw\")\n        sys.exit(1)\n    \n    try:\n        value = float(sys.argv[1])\n        from_unit = sys.argv[2]\n        to_unit = sys.argv[3]\n        \n        # Apply aliases if any\n        from_unit = unit_aliases.get(from_unit.lower(), from_unit)\n        to_unit = unit_aliases.get(to_unit.lower(), to_unit)\n        \n        # Use Quantity for proper temperature and unit handling\n        quantity = ureg.Quantity(value, from_unit)\n        converted = quantity.to(to_unit)\n        \n        # Rounded output\n        print(f\"{value} {from_unit} is {round(converted.magnitude, 4)} {to_unit}\")\n    \n    except (UndefinedUnitError, DimensionalityError) as e:\n        print(f\"Error: {e}\")\n        print(\"Ensure units are valid and compatible (e.g., length to length, pressure to pressure).\")\n    except ValueError:\n        print(\"Error: The value must be a number.\")\n\nif __name__ == \"__main__\":\n    main()\n\n\n3.4.4 Running the Script\nNavigate to your project directory in the terminal, activate the virtual environment, and run:\npython3 unit_converter.py\nOutput:\nUsage: python unit_converter.py &lt;value&gt; &lt;from_unit&gt; &lt;to_unit&gt;\n\nExamples:\n  python unit_converter.py 100 km/h mph\n  python unit_converter.py 16 knot km/h\n  python unit_converter.py 3 m^3/min l/s\n  python unit_converter.py 1000 kg/m^3 g/cm^3\n  python unit_converter.py 7 bar psi\n  python unit_converter.py 12 bar MPa\n  python unit_converter.py 3000 kw hp\nFor temperature:\npython3 unit_converter.py 100 degC degF\nOutput: 100.0 degC is 212.0 degF\nFor speed:\npython3 unit_converter.py 100 knot km_per_hour\nOutput: 100.0 knot is 185.2 km/h\nFor pressure:\npython3 unit_converter.py 50 psi kPa\nOutput: 50.0 psi is 344.7379 kPa\npython3 unit_converter.py 2 bar psi\nOutput: 2.0 bar is 29.0075 psi\npython3 unit_converter.py 3000 kw hp\nOutput: 3000.0 kilowatt is 4023.0663 horsepower\nThis script handles errors for invalid units, incompatible conversions (e.g., meters to kilograms), and non-numeric inputs.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Advanced Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_advanced.html#summary",
    "href": "tutorial_advanced.html#summary",
    "title": "3  Advanced Python Tutorial",
    "section": "3.5 Summary",
    "text": "3.5 Summary\nThis advanced tutorial explored virtual environments for project isolation, installing libraries like Pint using pip, and constructing a versatile unit conversion script. The script supports conversions for length, temperature, speed (e.g., knots to km/h), and pressure (e.g., psi to kPa, bar to psi), making it useful for scientific and engineering applications. For further exploration, consult the official Pint documentation or experiment with additional units and quantities.",
    "crumbs": [
      "Beginning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Advanced Python Tutorial</span>"
    ]
  },
  {
    "objectID": "tutorial_advanced1.html",
    "href": "tutorial_advanced1.html",
    "title": "4  Python for Applied Mechanics",
    "section": "",
    "text": "4.1 Requirements\nThis tutorial extends the foundational and advanced Python concepts from previous tutorials, tailoring them to applied mechanics in engineering. It focuses on using NumPy for numerical computations involving vectors and matrices (e.g., forces, stresses), Matplotlib for visualizing mechanics data (e.g., stress-strain curves, motion plots), and integrates these with Pint for unit-aware calculations. Examples are drawn from statics, dynamics, and mechanics of materials. Assume Pint, NumPy, and Matplotlib are installed in your virtual environment (as covered in the advanced tutorial).\nBuild on the advanced tutorial: Activate your virtual environment and ensure the following libraries are installed via pip install numpy matplotlib scipy pint. SciPy is included for numerical methods like solving differential equations.",
    "crumbs": [
      "Making progress",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python for Applied Mechanics</span>"
    ]
  },
  {
    "objectID": "tutorial_advanced1.html#numpy-for-vectors-and-matrices",
    "href": "tutorial_advanced1.html#numpy-for-vectors-and-matrices",
    "title": "4  Python for Applied Mechanics",
    "section": "4.2 NumPy for Vectors and Matrices",
    "text": "4.2 NumPy for Vectors and Matrices\nNumPy is essential for handling arrays and matrices in applied mechanics, such as representing force vectors, displacement arrays, or stiffness matrices.\n\n4.2.1 Vector Operations\nVectors are used for forces, velocities, and moments. NumPy arrays enable efficient operations like addition (resultant forces) and dot/cross products (work or torque).\nThese operations are crucial in statics for equilibrium analysis or in dynamics for momentum calculations.\n# Vector Operations using NumPy\nimport numpy as np\n\n# Define two force vectors in 3D space (units: Newtons)\nforce1 = np.array([10, 20, 0])  # Force vector 1 along x and y directions\nforce2 = np.array([5, -10, 15]) # Force vector 2 along x, y, and z directions\n\n# 1. Resultant Force\n# Vector addition gives the combined effect of both forces\nresultant = force1 + force2\nprint(\"Resultant Force:\", resultant)\n# Output: [15 10 15]\n\n# 2. Dot Product\n# Measures how much one vector acts in the direction of another\n# Often interpreted as work done if one vector is force and the other is displacement\nwork = np.dot(force1, force2)\nprint(\"Dot Product (Work):\", work)\n# Output: -150\n\n# 3. Cross Product\n# Produces a vector perpendicular to both input vectors\n# Often used to calculate torque (moment) vector\ntorque = np.cross(force1, force2)\nprint(\"Cross Product (Torque):\", torque)\n# Output: [ 300 -150 -200]\nOutput:\nResultant Force: [15 10 15]\nDot Product (Work): -150\nCross Product (Torque): [ 300 -150 -200]",
    "crumbs": [
      "Making progress",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python for Applied Mechanics</span>"
    ]
  },
  {
    "objectID": "tutorial_advanced1.html#matplotlib-for-visualizing-mechanics-data",
    "href": "tutorial_advanced1.html#matplotlib-for-visualizing-mechanics-data",
    "title": "4  Python for Applied Mechanics",
    "section": "4.3 Matplotlib for Visualizing Mechanics Data",
    "text": "4.3 Matplotlib for Visualizing Mechanics Data\nMatplotlib allows plotting of mechanics results, such as stress-strain curves in materials testing or position-time graphs in kinematics.\n\n4.3.1 Basic Plotting\nPlot force vs. displacement for a linear spring (Hooke’s law: F = kx).\n# Plotting Force vs. Displacement for a Linear Spring (Hooke's Law)\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 1. Define displacement array (from 0 to 0.1 meters)\nx = np.linspace(0, 0.1, 50)  # 50 points for smooth curve\n\n# 2. Define spring constant\nk = 100  # Spring stiffness in N/m\n\n# 3. Calculate force using Hooke's Law: F = k * x\nF = k * x  # Force in Newtons corresponding to each displacement\n\n# 4. Plotting\nplt.plot(x, F, label='Force vs. Displacement', color='blue', linewidth=2)\nplt.xlabel('Displacement (m)')       # x-axis label\nplt.ylabel('Force (N)')              # y-axis label\nplt.title('Hooke\\'s Law for a Spring')  # Plot title\nplt.legend()                         # Show legend\nplt.grid(True)                        # Add grid lines for readability\n\n# 5. Display the plot\nplt.show()\nThis generates a line plot showing a linear relationship, useful for visualizing elastic behavior.\n\n\n\nHooke’s Law\n\n\n\n\n4.3.2 Advanced Plot: Stress-Strain Curve\nFor mechanics of materials, plot a typical stress-strain curve for steel.\n# Plot a typical stress-strain curve for steel (elastic + plastic behavior)\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 1. Define strain array (dimensionless)\n# Small values since steel deforms elastically up to ~0.2% strain\nstrain = np.linspace(0, 0.015, 100)  # 0 to 1.5% strain\n\n# 2. Material properties\nE = 200_000         # Young's modulus in MPa (elastic stiffness)\nyield_strain = 0.002  # Approximate yield strain (0.2%)\nyield_stress = E * yield_strain  # Stress at yield (MPa)\n\n# 3. Stress-strain relationship\n# Linear elastic region: stress = E * strain\n# Plastic region: stress increases at lower slope (simplified hardening)\nstress = np.where(\n    strain &lt;= yield_strain,\n    E * strain,                       # Elastic region\n    yield_stress + 10_000 * (strain - yield_strain)  # Plastic region with hardening\n)\n\n# 4. Plotting the curve\nplt.plot(strain, stress, color='blue', linewidth=2, label='Steel Stress-Strain')\nplt.xlabel('Strain (dimensionless)')\nplt.ylabel('Stress (MPa)')\nplt.title('Stress-Strain Curve for Steel')\n\n# Mark the yield point\nplt.axvline(x=yield_strain, color='red', linestyle='--', label='Yield Point')\n\nplt.legend()\nplt.grid(True)  # Show grid for better readability\nplt.show()\nThis plot illustrates elastic and plastic regions, with a dashed line at the yield point.\n\n\n\nStress-Strain Curve",
    "crumbs": [
      "Making progress",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python for Applied Mechanics</span>"
    ]
  },
  {
    "objectID": "tutorial_advanced1.html#numerical-methods-with-scipy",
    "href": "tutorial_advanced1.html#numerical-methods-with-scipy",
    "title": "4  Python for Applied Mechanics",
    "section": "4.4 Numerical Methods with SciPy",
    "text": "4.4 Numerical Methods with SciPy\nSciPy provides tools for numerical integration and solving differential equations, key in dynamics for motion simulation.\n\n4.4.1 Solving ODEs: Simple Harmonic Motion\nModel a mass-spring system: d²x/dt² + ω²x = 0.\n# Simple Harmonic Motion (SHM) Simulation using ODE Integration\n\nimport numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\n\n# 1. Define the differential equation for SHM\ndef shm(y, t, omega):\n    \"\"\"\n    y: [position, velocity]\n    Returns derivatives [dy/dt, dv/dt]\n    dv/dt = -omega^2 * position\n    \"\"\"\n    return [y[1], -omega**2 * y[0]]\n\n# 2. Initial conditions\ny0 = [1, 0]           # Initial position = 1 m, initial velocity = 0 m/s\n\n# 3. Time array for simulation\nt = np.linspace(0, 10, 100)  # 0 to 10 seconds, 100 points\n\n# 4. Angular frequency\nomega = 1  # rad/s\n\n# 5. Solve the ODE\nsol = odeint(shm, y0, t, args=(omega,))\n\n# 6. Plot position vs. time\nplt.plot(t, sol[:, 0], label='Position (m)', color='blue', linewidth=2)\nplt.xlabel('Time (s)')\nplt.ylabel('Position (m)')\nplt.title('Simple Harmonic Motion')\nplt.grid(True)\nplt.legend()\nplt.show()\nThe plot shows a sinusoidal oscillation of position vs. time.\n\n\n\nSinusoidal oscillation of position vs. time.",
    "crumbs": [
      "Making progress",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python for Applied Mechanics</span>"
    ]
  },
  {
    "objectID": "tutorial_advanced1.html#integration-example-projectile-motion",
    "href": "tutorial_advanced1.html#integration-example-projectile-motion",
    "title": "4  Python for Applied Mechanics",
    "section": "4.5 Integration Example: Projectile Motion",
    "text": "4.5 Integration Example: Projectile Motion\nCombine NumPy, SciPy, and Matplotlib for a dynamics problem: Simulate projectile trajectory under gravity.\n# Simulate projectile motion under gravity using ODE integration\n\nimport numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\n\n# 1. Define the ODE system for projectile motion\ndef projectile(y, t, g, theta, v0):\n    \"\"\"\n    y = [x, vx, y, vy]\n    Returns derivatives [dx/dt, dvx/dt, dy/dt, dvy/dt]\n    Assumes no air resistance, constant gravity.\n    \"\"\"\n    return [y[1], 0, y[3], -g]  # dx/dt = vx, dvx/dt = 0, dy/dt = vy, dvy/dt = -g\n\n# 2. Initial conditions\ntheta = np.radians(45)     # Launch angle in radians\nv0 = 20                    # Initial speed in m/s\ny0 = [0, v0 * np.cos(theta), 0, v0 * np.sin(theta)]  # [x0, vx0, y0, vy0]\n\n# 3. Time array for simulation\nt = np.linspace(0, 4, 100)  # 0 to 4 seconds\n\n# 4. Gravity\ng = 9.81  # m/s²\n\n# 5. Solve the ODE\nsol = odeint(projectile, y0, t, args=(g, theta, v0))\n\n# 6. Plot trajectory (x vs. y)\nplt.plot(sol[:, 0], sol[:, 2], color='blue', linewidth=2)\nplt.xlabel('Horizontal Distance (m)')\nplt.ylabel('Vertical Distance (m)')\nplt.title('Projectile Trajectory')\nplt.grid(True)\nplt.show()\nThis simulates and plots the parabolic path, ignoring air resistance.\n\n\n\nProjectile Trajectory",
    "crumbs": [
      "Making progress",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python for Applied Mechanics</span>"
    ]
  },
  {
    "objectID": "tutorial_advanced1.html#summary",
    "href": "tutorial_advanced1.html#summary",
    "title": "4  Python for Applied Mechanics",
    "section": "4.6 Summary",
    "text": "4.6 Summary\nThis tutorial applies Python tools to applied mechanics, using NumPy for computations, Matplotlib for visualization, SciPy for numerical methods, and Pint for unit handling. These techniques support analysis in statics, dynamics, and materials. Experiment with parameters or integrate with real data for class projects.",
    "crumbs": [
      "Making progress",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python for Applied Mechanics</span>"
    ]
  },
  {
    "objectID": "review.html",
    "href": "review.html",
    "title": "5  Review",
    "section": "",
    "text": "We have used several books by Shaw (2017), Russell et al. (2021), Bolton (2021), Polya & Conway (2014), Bird & Ross (2020) and Bird (2021). These sources have helped you understand complex concepts.\nChapter 2:\n\nPurpose of SI Units: Provide a consistent framework for scientific and technical measurements.\nAdvantages of SI Units: Facilitate clear communication and data comparison across various fields and countries.\nFundamental Units of SI: Meter, kilogram, second, ampere, kelvin, mole, and candela.\nMethod Name: Unity fraction method.\nPurpose: Converting one unit of measurement into another.\nMethodology: Multiplying by fractions equal to one, where the numerator and denominator represent the same quantity in different units.\n\n\n\n\n\nBird, J. O. (2021). Bird’s engineering mathematics (Ninth edition). Routledge.\n\n\nBird, J. O., & Ross, C. T. F. (2020). Mechanical engineering principles (Fourth edition). Routledge.\n\n\nBolton, W. (2021). Engineering science (Seventh edition). Routledge.\n\n\nPolya, G., & Conway, J. H. (2014). How to solve it: A new aspect of mathematical method (With a Foreword by John H. Con ed. edition). Princeton University Press.\n\n\nRussell, P. A., Jackson, L., & Embleton, W. (2021). Applied mechanics for marine engineers (7th edition). Reeds.\n\n\nShaw, Z. (2017). Learn python 3 the hard way: A very simple introduction to the terrifyingly beautiful world of computers and code (4th edition). Addison-Wesley Professional.",
    "crumbs": [
      "Going forward",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Review</span>"
    ]
  },
  {
    "objectID": "appendix.html",
    "href": "appendix.html",
    "title": "Appendix",
    "section": "",
    "text": "SI System Rules and Common Mistakes\nUsing the SI system correctly is crucial for clear communication in science and engineering. Below are common mistakes in using the SI system, examples of incorrect usage, and how to correct them.",
    "crumbs": [
      "Appendices",
      "Appendix"
    ]
  },
  {
    "objectID": "appendix.html#si-system-rules-and-common-mistakes",
    "href": "appendix.html#si-system-rules-and-common-mistakes",
    "title": "Appendix",
    "section": "",
    "text": "SI system rules and common mistakes\n\n\n\n\n\n\n\n\nConcept\nMistake\nCorrect Usage\nNotes\n\n\n\n\nUse of SI Unit Symbols\nm./s\nm/s\nUse the correct format without additional punctuation.\n\n\nSpacing Between Value & Unit\n10kg\n10 kg\nAlways leave a space between the number and the unit symbol.\n\n\nIncorrect Unit Symbols\nsec, hrs, °K\ns, h, K\nUse the proper SI symbols; symbols are case-sensitive.\n\n\nAbbreviations for Units\n5 kilograms (kgs)\n5 kilograms (kg)\nAvoid informal abbreviations like “kgs”; adhere to standard symbols.\n\n\nMultiple Units in Expressions\n5 m/s/s, 5 kg/meter²\n5 m/s², 5 kg/m²\nUse compact, standardized formats for derived units.\n\n\nIncorrect Use of Prefixes\n0.0001 km\n100 mm\nChoose prefixes to keep numbers in the range (0.1 x &lt; 1000).\n\n\nMisplaced Unit Symbols\n5/s, kg10\n5 s⁻¹, 10 kg\nSymbols must follow numerical values, not precede them.\n\n\nDegrees Celsius vs. Kelvin\n300°K\n300 K\nKelvin is written without “degree”\n\n\nSingular vs. Plural Units\n5 kgs, 1 meters\n5 kg, 1 meter\nSymbols do not pluralize; full unit names follow grammar rules.\n\n\nCapitalization of Symbols\nKg, S, Km, MA\nkg, s, km, mA\nSymbols are case-sensitive; use uppercase only where specified (e.g., N, Pa).\n\n\nCapitalization of Unit Names\nNewton, Pascal, Watt\nnewton, pascal, watt\nUnit names are lowercase, even if derived from a person’s name, unless starting a sentence.\n\n\nPrefix Capitalization\nMilliMeter, MegaWatt\nmillimeter, megawatt\nPrefixes are lowercase for (10^{-1}) to (10^{-9}), uppercase for (10^6) and larger (except k for kilo).\n\n\nFormatting in Reports\n5, Temperature: 300\n5 kg, Temperature: 300 K\nAlways specify units explicitly.",
    "crumbs": [
      "Appendices",
      "Appendix"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Bird, J. O. (2021). Bird’s engineering mathematics (Ninth\nedition). Routledge.\n\n\nBird, J. O., & Ross, C. T. F. (2020). Mechanical engineering\nprinciples (Fourth edition). Routledge.\n\n\nBolton, W. (2021). Engineering science (Seventh edition).\nRoutledge.\n\n\nPolya, G., & Conway, J. H. (2014). How to solve it: A new aspect\nof mathematical method (With a Foreword by John H. Con ed.\nedition). Princeton University Press.\n\n\nRussell, P. A., Jackson, L., & Embleton, W. (2021). Applied\nmechanics for marine engineers (7th edition). Reeds.\n\n\nShaw, Z. (2017). Learn python 3 the hard way: A very simple\nintroduction to the terrifyingly beautiful world of computers and\ncode (4th edition). Addison-Wesley Professional.",
    "crumbs": [
      "Appendices",
      "References"
    ]
  },
  {
    "objectID": "colophon.html",
    "href": "colophon.html",
    "title": "Colophon",
    "section": "",
    "text": "This book was generated with Positron and Quarto v.1.8.21, powered by Pandoc for document conversion.",
    "crumbs": [
      "Appendices",
      "Colophon"
    ]
  }
]